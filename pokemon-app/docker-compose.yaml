# Docker ya lee los archivos .en que se encuentran al mismo nivel
version:  '3'

services:
  db:
    #container_name: pokemonDB
    container_name: ${MONGO_DB_NAME}
    image: mongo:6.0
    volumes:
      - poke-vol:/data/db
    #SI solo quiero que el contenedor de mongo express se conecte al contenedor de mongo y no la maquina local, puedo no exponer los puertos 
    # ports:
    #   - 27017:27017
    #Reiniciar el contenedor si se detiene
    restart: always
    #Variables de entornos especificadas por los creadores de la imagen
    environment:
      #- MONGO_INITDB_ROOT_USERNAME=jota
      #- MONGO_INITDB_ROOT_PASSWORD=123456
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    #Para que al momento de que se cargue el contenedor lo haga con el flag --auth
    command: ['--auth']
  
  mongo_express:
    depends_on:
      - db
    container_name: mongo_express
    image: mongo-express:1.0.0-alpha.4
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=${MONGO_DB_NAME}
    ports:
     #Puerto local:Puerto del Contenedor
      - 8080:8081
    #Reiniciar el contenedor si se detiene
    restart: always
  
  poke-app:
    depends_on:
      - db
      - mongo_express
    image: klerith/pokemon-nest-app:1.0.0
    ports:
      - 3000:3000
    environment:
    #Esta es otra forma de especificar las variables de entorno
      MONGODB: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGO_DB_NAME}:27017
      DB_NAME: ${MONGO_DB_NAME}
    #Reiniciar el contenedor si se detiene
    restart: always
volumes:
  poke-vol:
    #Con external: false, va a crear el volume pokemon-app_poke-vol
    external: false